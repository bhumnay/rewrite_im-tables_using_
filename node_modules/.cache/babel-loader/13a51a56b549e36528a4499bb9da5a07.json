{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calcRangeKeys = calcRangeKeys;\nexports.convertDirectoryKeysToNodes = convertDirectoryKeysToNodes;\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nvar Record;\n\n(function (Record) {\n  Record[Record[\"None\"] = 0] = \"None\";\n  Record[Record[\"Start\"] = 1] = \"Start\";\n  Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {}));\n\nfunction traverseNodesKey(treeData, callback) {\n  function processNode(dataNode) {\n    var key = dataNode.key,\n        children = dataNode.children;\n\n    if (callback(key, dataNode) !== false) {\n      traverseNodesKey(children || [], callback);\n    }\n  }\n\n  treeData.forEach(processNode);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\n\n\nfunction calcRangeKeys(treeData, expandedKeys, startKey, endKey) {\n  var keys = [];\n  var record = Record.None;\n\n  if (startKey && startKey === endKey) {\n    return [startKey];\n  }\n\n  if (!startKey || !endKey) {\n    return [];\n  }\n\n  function matchKey(key) {\n    return key === startKey || key === endKey;\n  }\n\n  traverseNodesKey(treeData, function (key) {\n    if (record === Record.End) {\n      return false;\n    }\n\n    if (matchKey(key)) {\n      // Match test\n      keys.push(key);\n\n      if (record === Record.None) {\n        record = Record.Start;\n      } else if (record === Record.Start) {\n        record = Record.End;\n        return false;\n      }\n    } else if (record === Record.Start) {\n      // Append selection\n      keys.push(key);\n    }\n\n    if (expandedKeys.indexOf(key) === -1) {\n      return false;\n    }\n\n    return true;\n  });\n  return keys;\n}\n\nfunction convertDirectoryKeysToNodes(treeData, keys) {\n  var restKeys = _toConsumableArray(keys);\n\n  var nodes = [];\n  traverseNodesKey(treeData, function (key, node) {\n    var index = restKeys.indexOf(key);\n\n    if (index !== -1) {\n      nodes.push(node);\n      restKeys.splice(index, 1);\n    }\n\n    return !!restKeys.length;\n  });\n  return nodes;\n}","map":{"version":3,"sources":["/home/bhumika/app1/node_modules/antd/lib/tree/utils/dictUtil.js"],"names":["Object","defineProperty","exports","value","calcRangeKeys","convertDirectoryKeysToNodes","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","prototype","toString","call","Array","from","isArray","i","arr2","length","Record","traverseNodesKey","treeData","callback","processNode","dataNode","key","children","forEach","expandedKeys","startKey","endKey","keys","record","None","matchKey","End","push","Start","indexOf","restKeys","nodes","node","index","splice"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calcRangeKeys = calcRangeKeys;\nexports.convertDirectoryKeysToNodes = convertDirectoryKeysToNodes;\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nvar Record;\n\n(function (Record) {\n  Record[Record[\"None\"] = 0] = \"None\";\n  Record[Record[\"Start\"] = 1] = \"Start\";\n  Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {}));\n\nfunction traverseNodesKey(treeData, callback) {\n  function processNode(dataNode) {\n    var key = dataNode.key,\n        children = dataNode.children;\n\n    if (callback(key, dataNode) !== false) {\n      traverseNodesKey(children || [], callback);\n    }\n  }\n\n  treeData.forEach(processNode);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\n\n\nfunction calcRangeKeys(treeData, expandedKeys, startKey, endKey) {\n  var keys = [];\n  var record = Record.None;\n\n  if (startKey && startKey === endKey) {\n    return [startKey];\n  }\n\n  if (!startKey || !endKey) {\n    return [];\n  }\n\n  function matchKey(key) {\n    return key === startKey || key === endKey;\n  }\n\n  traverseNodesKey(treeData, function (key) {\n    if (record === Record.End) {\n      return false;\n    }\n\n    if (matchKey(key)) {\n      // Match test\n      keys.push(key);\n\n      if (record === Record.None) {\n        record = Record.Start;\n      } else if (record === Record.Start) {\n        record = Record.End;\n        return false;\n      }\n    } else if (record === Record.Start) {\n      // Append selection\n      keys.push(key);\n    }\n\n    if (expandedKeys.indexOf(key) === -1) {\n      return false;\n    }\n\n    return true;\n  });\n  return keys;\n}\n\nfunction convertDirectoryKeysToNodes(treeData, keys) {\n  var restKeys = _toConsumableArray(keys);\n\n  var nodes = [];\n  traverseNodesKey(treeData, function (key, node) {\n    var index = restKeys.indexOf(key);\n\n    if (index !== -1) {\n      nodes.push(node);\n      restKeys.splice(index, 1);\n    }\n\n    return !!restKeys.length;\n  });\n  return nodes;\n}"]},"metadata":{},"sourceType":"script"}